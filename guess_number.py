# file: guess_number.py
import argparse
import json
import os
import random
import sys

STATS_FILE = "guess_stats.json"
ERR_PREFIX = "[–û—à–∏–±–∫–∞]"

def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_stats(stats):
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception:
        print(f"{ERR_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

def ask_int(prompt: str, min_val: int, max_val: int) -> int:
    while True:
        try:
            raw = input(prompt).strip()
            if not raw or not (raw.lstrip("-").isdigit()):
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            x = int(raw)
            if x < min_val or x > max_val:
                raise ValueError(f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [{min_val}, {max_val}].")
            return x
        except (EOFError, KeyboardInterrupt):
            print("\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            sys.exit(0)
        except ValueError as e:
            print(f"{ERR_PREFIX} {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def play_once(low: int, high: int, attempts: int, give_hint_after: int | None):
    secret = random.randint(low, high)
    print(f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {low} –¥–æ {high}. –£ –≤–∞—Å {attempts} –ø–æ–ø—ã—Ç–æ–∫.")

    for i in range(1, attempts + 1):
        guess = ask_int(f"[–ü–æ–ø—ã—Ç–∫–∞ {i}/{attempts}] –í–∞—à –æ—Ç–≤–µ—Ç: ", low, high)

        if guess == secret:
            print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏!")
            return True, i

        if guess < secret:
            print("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ.")
        else:
            print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.")

        if give_hint_after and i == give_hint_after:
            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: —Å—É–∑–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
            delta = max(1, (high - low) // 4)
            hint_low = max(low, secret - delta)
            hint_high = min(high, secret + delta)
            print(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [{hint_low}, {hint_high}].")

    print(f"–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {secret}.")
    return False, attempts

def main():
    parser = argparse.ArgumentParser(description="–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'")
    parser.add_argument("--low", type=int, default=1, help="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)")
    parser.add_argument("--high", type=int, default=100, help="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)")
    parser.add_argument("--attempts", type=int, default=7, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
    parser.add_argument("--hint-after", type=int, default=3, help="–î–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ—Å–ª–µ N-–π –ø–æ–ø—ã—Ç–∫–∏ (0 = –≤—ã–∫–ª)")
    parser.add_argument("--no-stats", action="store_true", help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    args = parser.parse_args()

    if args.low >= args.high:
        print(f"{ERR_PREFIX} low –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ high.")
        sys.exit(2)
    if args.attempts <= 0:
        print(f"{ERR_PREFIX} attempts –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        sys.exit(2)
    give_hint_after = None if args.hint_after <= 0 else args.hint_after

    stats = {} if args.no_stats else load_stats()
    stats.setdefault("games", 0)
    stats.setdefault("wins", 0)
    stats.setdefault("best_attempts", None)

    print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —É–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–º–æ–≥—É—Ç —Å—É–∑–∏—Ç—å –ø–æ–∏—Å–∫.")

    while True:
        win, used = play_once(args.low, args.high, args.attempts, give_hint_after)
        stats["games"] += 1
        if win:
            stats["wins"] += 1
            if stats["best_attempts"] is None or used < stats["best_attempts"]:
                stats["best_attempts"] = used

        if not args.no_stats:
            save_stats(stats)

        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∏–≥—Ä={stats['games']}, –ø–æ–±–µ–¥={stats['wins']}, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç={stats['best_attempts']}")
        again = input("–°—ã–≥—Ä–∞—Ç—å –µ—â—ë? (y/n): ").strip().lower()
        if again != "y":
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            break

if __name__ == "__main__":
    main()
